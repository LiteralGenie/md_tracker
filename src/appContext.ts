import { ConfigOut, loadConfig } from "@/lib/config"
import { initMdb, Mdb } from "@/lib/db"
import { startDbReplication } from "@/lib/replication/replicate-db"
import {
    exportLocalHistory,
    importRemoteHistory,
} from "@/lib/sync-md-history"
import {
    fetchMdSeenTitles,
    findMdToken,
    MdTitlesSeen,
} from "@/lib/utils/md-utils"

export interface AppContext {
    mdb: Mdb
    config: ConfigOut

    md: null | {
        token: string

        // Preload these because they're expensive to generate
        titlesSeen: MdTitlesSeen
        titlesSeenTask: Promise<unknown>
    }

    historySyncTask: Promise<unknown>
    dbReplicationTask: Promise<unknown>
}

export async function initAppContext(): Promise<AppContext> {
    const mdb = await initMdb()
    const config = await loadConfig(mdb)

    const mdToken = findMdToken()

    let md = null
    if (mdToken) {
        // Mapping chapter id to title id can take a while,
        // so just make do with whatever's in cache
        // and run the update in background, letting it take effect next refresh
        const titlesSeen = await fetchMdSeenTitles({
            mdb,
            mdToken,
            onlyCache: true,
        })
        const titlesSeenTask = fetchMdSeenTitles({
            mdb,
            mdToken,
            onlyCache: false,
        })

        md = {
            token: mdToken,
            titlesSeen,
            titlesSeenTask,
        }
    }

    // Sync reading history generated by MD in localstorage
    // with our own list in IndexedDB (which may be updated by other clients via sync server)
    const historySyncTask = (async () => {
        exportLocalHistory(mdb)
        importRemoteHistory(mdb)
    })()

    const dbReplicationTask = startDbReplication(mdb)

    return {
        mdb,
        config,
        md,
        historySyncTask,
        dbReplicationTask,
    }
}
